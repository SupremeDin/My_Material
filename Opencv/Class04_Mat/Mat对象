class 3：Mat对象
	1.是一个面向对象的数据结构：可以自动分配内存（不像早期的IplImage对象：c语言风格 需自己分配管理内存 容易造成没存泄露！！！）
        2.Mat分两个部分（头部+数据部分）
 	3.dst.copyTo(src) 深拷贝 （当dst跟src的矩阵头部大小信息一致时 ，是浅拷贝 即不申请新的空间 两个对象指向同一个内存块）
          dst.clone() 完全的深拷贝 （先申请新的内存，然后在进行完全的拷贝！）
          Mat img2 = img1; 普通的赋值操作为 浅拷贝！
        4.3种方法遍历图像像素
             1.用指针   src.ptr<Vec3b>(i)[j][0] = 0   <Vec3b>:3通道的uchar类型的数据 若为单通道 则此处应为<uchar>；第i行 第j列 来表示位置；[0]表示3通道中的第0通道，即蓝色通道                                                                         
             2.利用迭代器访问 Iterator：创建一个Mat::Iterator对象it，通过it=Mat::begin()来的到迭代首地址，递增迭代器知道it==Mat::end()结束迭代
	     3.动态访问 Mat::at(i,j) :访问像素最慢的一种方法-- src.at<Vec3b>(i, j)[2] = 0; [2]表示第2通道 （最简单的获取图像像素！最慢！）
	5. Mat本身可以是一个矩阵哈哈哈....
